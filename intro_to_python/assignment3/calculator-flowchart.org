# -*- fill-column: 80; org-confirm-babel-evaluate: nil -*-

#+TITLE:     Assignment 3, Flowcharts
#+AUTHOR:    Oleg Sivokon
#+EMAIL:     olegsivokon@gmail.com
#+DATE:      <2017-12-01 Fri>
#+DESCRIPTION: Third assignment in the course Intro to Python
#+KEYWORDS: Data-Structures, Algorithms, Assignment
#+LANGUAGE: en
#+LaTeX_CLASS: article
#+LATEX_HEADER: \usepackage{commath}
#+LATEX_HEADER: \usepackage{pgf}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{shapes,backgrounds,arrows.meta}
#+LATEX_HEADER: \usetikzlibrary{arrows.meta}
#+LATEX_HEADER: \usetikzlibrary{positioning}
#+LATEX_HEADER: \usepackage{marginnote}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{enumerate}
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \setlength{\parskip}{16pt plus 2pt minus 2pt}
#+LATEX_HEADER: \renewcommand{\arraystretch}{1.6}

#+BEGIN_SRC emacs-lisp :exports none
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -f %f")
        org-latex-listings t
        org-src-fontify-natively t
        org-babel-latex-htlatex "htlatex")

  (defmacro by-backend (&rest body)
    `(progn
       (cl-case org-export-current-backend ,@body)))
#+END_SRC

#+RESULTS:
: by-backend

#+BEGIN_LATEX
\definecolor{codebg}{rgb}{0.96,0.99,0.8}
\definecolor{codestr}{rgb}{0.46,0.09,0.2}
\lstset{%
  backgroundcolor=\color{codebg},
  basicstyle=\ttfamily\scriptsize,
  breakatwhitespace=false,
  breaklines=false,
  captionpos=b,
  framexleftmargin=10pt,
  xleftmargin=10pt,
  framerule=0pt,
  frame=tb,
  keepspaces=true,
  keywordstyle=\color{blue},
  showspaces=false,
  showstringspaces=false,
  showtabs=false,
  stringstyle=\color{codestr},
  tabsize=2
}
\lstnewenvironment{maxima}{%
  \lstset{%
    backgroundcolor=\color{codebg},
    escapeinside={(*@}{@*)},
    aboveskip=20pt,
    captionpos=b,
    label=,
    caption=,
    showstringspaces=false,
    frame=single,
    framerule=0pt,
    basicstyle=\ttfamily\scriptsize,
    columns=fixed}}{}
}
\makeatletter
\newcommand{\verbatimfont}[1]{\renewcommand{\verbatim@font}{\ttfamily#1}}
\makeatother
\verbatimfont{\small}%
\clearpage
#+END_LATEX

* Very simple calculator
  This calculator works similar to earlieast [[https://en.wikipedia.org/wiki/Hewlett-Packard_9100A][HP 9100A calculator]],
  However, it can only add, subtract, divide and multiply.

** Reverse Polish Notation
   Calculator uses reverse Polish notation (assignment doesn't specify
   the notation to be used) because it is easier to implement, it
   allows variable number of operands (assignment requires two
   operands, but doesn't state bounds), and because this is typical in
   professional calculators.

   Conceptually, this means that operands are written before the
   operation, the operation ``consumes'' all operands to the left of
   it.  See the grammar below for more formal description:

   #+HEADER: :exports results
   #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
   #+BEGIN_SRC latex
     \begin{align*}
       &S \to Num (Delim \; Num)^* Op \\
       &Delim \to \;\sim (Digit \;|\; Op)^+ \\
       &Op \to + \;|\; - \;|\; * \;|\; / \\
       &Digit \to [0..9] \\
       &Num \to Digit^+ \;.
     \end{align*}
   #+END_SRC
   
** Two stacks and two streams
   Conceptually, the calculator operates on two stacks and two streams:
   
   - character stack :: Is used to accumulate characters to later
        interpret them as a number.
   - number stack :: Is used to accumulate numbers to later feed them
                     to the selected operation.

   - input stream :: Is used to read the input from user.
   - output stream :: Is used to print the results.

** Limitations
   - To simplify the code, the calculator only works with positive
     integers.
   - The limits on the number of arguments, size of integers etc. are
     all the same as for the Python interpreter used.
   - Division by zero is handled by Python itself, not this program.

* Flowchart diagram

  #+HEADER: :exports results
  #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
  #+BEGIN_SRC latex
    \tikzstyle{startstop} = [rectangle, rounded corners, minimum
      width=3cm, minimum height=1cm,text centered, draw=black,
      fill=red!30]

    \tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right
      angle=110, minimum width=3cm, minimum height=1cm, text centered,
      draw=black, fill=blue!30]

    \tikzstyle{process} = [rectangle, minimum width=3cm, minimum
      height=1cm, text centered, draw=black, fill=orange!30]

    \tikzstyle{decision} = [diamond, minimum width=3cm, minimum
      height=1cm, text centered, draw=black, fill=green!30]

    \tikzstyle{arrow} = [thick,->,>=Stealth]

    \begin{tikzpicture}[align=center, node distance=2.5cm and 2cm]

      \node (start) [startstop] {Start};
      \node (in1) [io, below of=start] {Input character};
      \node (dec1) [decision, below of=in1] {Is delimiter?};
      \node (proc1) [process, right= of dec1] {Empty\\character\\stack};
      \node (proc2) [process, left= of dec1] {Push to\\character\\stack};
      \node (dec2) [decision, below of=proc1] {Is operator?};
      \node (proc3) [process, below of=dec2] {Empty\\number\\stack};
      \node (proc4) [process, below of=proc3] {Apply\\operator};
      \node (proc5) [process, below of=proc4] {Print\\result};
      \node (proc6) [process, left= of dec2] {Push to\\number\\stack};
      \node (dec3) [decision, left= of proc3] {Is number?};
      \node (proc7) [process, left= of dec3] {Display error};

      \draw [arrow] (start) -- (in1);
      \draw [arrow] (in1) -- (dec1);
      \draw [arrow] (dec1) -- node[anchor=south] {yes} (proc1);
      \draw [arrow] (dec1) -- node[anchor=south] {no} (proc2);
      \draw [arrow] (proc1) -- (dec2);
      \draw [arrow] (dec2) -- node[anchor=west] {yes} (proc3);
      \draw [arrow] (dec2) -- node[anchor=south] {no} (dec3);
      \draw [arrow] (dec3) -- node[anchor=west] {yes} (proc6);
      \draw [arrow] (dec3) -- node[anchor=south] {no} (proc7);
      \draw [arrow] (proc3) -- (proc4);
      \draw [arrow] (proc4) -- (proc5);

    \end{tikzpicture}
  #+END_SRC

  To simplify the diagram, all transitions from final states to the input state
  have been omitted.
